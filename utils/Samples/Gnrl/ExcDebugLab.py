#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0a8 on Tue Sep 29 00:16:26 2020
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class DataAnalysisLabFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DataAnalysisLabFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1200, 800))
        self.SetTitle(_("DataAnalysisLab"))

        # Menu Bar
        self.mainFrame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, _("Close"), "")
        self.Bind(wx.EVT_MENU, self.CloseHandler, item)
        self.mainFrame_menubar.Append(wxglade_tmp_menu, _("File"))
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, _("About"), "")
        self.Bind(wx.EVT_MENU, self.AboutHandler, item)
        self.mainFrame_menubar.Append(wxglade_tmp_menu, _("Help"))
        self.SetMenuBar(self.mainFrame_menubar)
        # Menu Bar end

        frameSizer = wx.BoxSizer(wx.VERTICAL)

        topSizer = wx.BoxSizer(wx.HORIZONTAL)
        frameSizer.Add(topSizer, 0, wx.ALL | wx.EXPAND, 2)

        self.controlPanel = wx.Panel(self, wx.ID_ANY)
        self.controlPanel.SetMinSize((-1, 600))
        self.controlPanel.SetBackgroundColour(wx.Colour(50, 153, 204))
        topSizer.Add(self.controlPanel, 0, wx.LEFT | wx.RIGHT | wx.TOP, 2)

        controlSizer = wx.BoxSizer(wx.HORIZONTAL)

        ControlSizerCol1 = wx.BoxSizer(wx.VERTICAL)
        controlSizer.Add(ControlSizerCol1, 0, wx.ALL, 0)

        DataAnalysisSizer = wx.StaticBoxSizer(wx.StaticBox(self.controlPanel, wx.ID_ANY, _("Data Analysis")), wx.VERTICAL)
        ControlSizerCol1.Add(DataAnalysisSizer, 0, wx.ALL, 5)

        self.LoadData1 = wx.Button(self.controlPanel, wx.ID_ANY, _("Load Data-1"))
        self.LoadData1.SetBackgroundColour(wx.Colour(255, 255, 255))
        DataAnalysisSizer.Add(self.LoadData1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        self.LoadData2 = wx.Button(self.controlPanel, wx.ID_ANY, _("Load Data-2"))
        self.LoadData2.SetBackgroundColour(wx.Colour(255, 255, 255))
        DataAnalysisSizer.Add(self.LoadData2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        self.AnalyzeData1 = wx.Button(self.controlPanel, wx.ID_ANY, _("Analyze Data-1"))
        self.AnalyzeData1.SetBackgroundColour(wx.Colour(255, 255, 255))
        DataAnalysisSizer.Add(self.AnalyzeData1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        self.AnalyzeData2 = wx.Button(self.controlPanel, wx.ID_ANY, _("Analyze Data-2"))
        self.AnalyzeData2.SetBackgroundColour(wx.Colour(255, 255, 255))
        DataAnalysisSizer.Add(self.AnalyzeData2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        self.CompareData = wx.Button(self.controlPanel, wx.ID_ANY, _("Compare"))
        self.CompareData.SetBackgroundColour(wx.Colour(255, 255, 255))
        DataAnalysisSizer.Add(self.CompareData, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        SnifferSizer = wx.StaticBoxSizer(wx.StaticBox(self.controlPanel, wx.ID_ANY, _("Sniffer")), wx.VERTICAL)
        ControlSizerCol1.Add(SnifferSizer, 0, wx.ALL, 5)

        CaptureInterface = wx.StaticText(self.controlPanel, wx.ID_ANY, _("Capture Interface:"), style=wx.ALIGN_LEFT)
        SnifferSizer.Add(CaptureInterface, 0, wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.interface_text_ctrl = wx.TextCtrl(self.controlPanel, wx.ID_ANY, "")
        SnifferSizer.Add(self.interface_text_ctrl, 0, wx.ALL, 5)

        CaptureTimeout = wx.StaticText(self.controlPanel, wx.ID_ANY, _("Capture Timeout:"), style=wx.ALIGN_LEFT)
        SnifferSizer.Add(CaptureTimeout, 0, wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.timeout_text_ctrl = wx.TextCtrl(self.controlPanel, wx.ID_ANY, "")
        SnifferSizer.Add(self.timeout_text_ctrl, 0, wx.ALL, 5)

        CaptureFilter = wx.StaticText(self.controlPanel, wx.ID_ANY, _("Capture Filter:"), style=wx.ALIGN_LEFT)
        SnifferSizer.Add(CaptureFilter, 0, wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.filter_text_ctrl = wx.TextCtrl(self.controlPanel, wx.ID_ANY, "")
        SnifferSizer.Add(self.filter_text_ctrl, 0, wx.ALL, 5)

        self.SniffDataFile = wx.Button(self.controlPanel, wx.ID_ANY, _("Sniff Data File"))
        self.SniffDataFile.SetBackgroundColour(wx.Colour(255, 255, 255))
        SnifferSizer.Add(self.SniffDataFile, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        self.SniffDataLive = wx.Button(self.controlPanel, wx.ID_ANY, _("Sniff Data Live"))
        self.SniffDataLive.SetBackgroundColour(wx.Colour(255, 255, 255))
        SnifferSizer.Add(self.SniffDataLive, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        static_line_1 = wx.StaticLine(self.controlPanel, wx.ID_ANY, style=wx.LI_VERTICAL)
        static_line_1.SetMinSize((1, 600))
        controlSizer.Add(static_line_1, 0, wx.EXPAND, 0)

        ControlSizerCol2 = wx.BoxSizer(wx.VERTICAL)
        controlSizer.Add(ControlSizerCol2, 0, wx.ALL, 0)

        NiosSizer = wx.StaticBoxSizer(wx.StaticBox(self.controlPanel, wx.ID_ANY, _("Nios Debug")), wx.VERTICAL)
        ControlSizerCol2.Add(NiosSizer, 0, wx.ALL, 5)

        NiosCPU = wx.StaticText(self.controlPanel, wx.ID_ANY, _("CPU No:"), style=wx.ALIGN_LEFT)
        NiosSizer.Add(NiosCPU, 0, wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.interface_nios_cpu = wx.TextCtrl(self.controlPanel, wx.ID_ANY, "")
        NiosSizer.Add(self.interface_nios_cpu, 0, wx.ALL, 5)

        NiosMemorySize = wx.StaticText(self.controlPanel, wx.ID_ANY, _("Memort Size:"), style=wx.ALIGN_LEFT)
        NiosSizer.Add(NiosMemorySize, 0, wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.interface_nios_memory_read = wx.TextCtrl(self.controlPanel, wx.ID_ANY, "")
        NiosSizer.Add(self.interface_nios_memory_read, 0, wx.ALL, 5)

        self.ReadNiosMemory = wx.Button(self.controlPanel, wx.ID_ANY, _("Read Nios Memory"))
        self.ReadNiosMemory.SetBackgroundColour(wx.Colour(255, 255, 255))
        NiosSizer.Add(self.ReadNiosMemory, 0, wx.ALL, 5)

        read_write_delimiter = wx.StaticLine(self.controlPanel, wx.ID_ANY)
        NiosSizer.Add(read_write_delimiter, 0, wx.ALL | wx.EXPAND, 2)

        NiosWriteCmd = wx.StaticText(self.controlPanel, wx.ID_ANY, _("Nios Write Cmnd :"), style=wx.ALIGN_LEFT)
        NiosSizer.Add(NiosWriteCmd, 0, wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.interface_nios_memory_write = wx.TextCtrl(self.controlPanel, wx.ID_ANY, "")
        NiosSizer.Add(self.interface_nios_memory_write, 0, wx.ALL, 5)

        self.WriteNiosMemory = wx.Button(self.controlPanel, wx.ID_ANY, _("Write Nios Memory"))
        self.WriteNiosMemory.SetBackgroundColour(wx.Colour(255, 255, 255))
        NiosSizer.Add(self.WriteNiosMemory, 0, wx.ALL, 5)

        self.dataPanel = wx.Panel(self, wx.ID_ANY)
        self.dataPanel.SetBackgroundColour(wx.Colour(255, 255, 255))
        topSizer.Add(self.dataPanel, 1, wx.EXPAND | wx.RIGHT | wx.TOP, 2)

        dataPanelSizer = wx.BoxSizer(wx.HORIZONTAL)

        self.dataNB = wx.Notebook(self.dataPanel, wx.ID_ANY)
        dataPanelSizer.Add(self.dataNB, 1, wx.EXPAND, 0)

        self.CompareTab = wx.Panel(self.dataNB, wx.ID_ANY)
        self.dataNB.AddPage(self.CompareTab, _("Compare"))

        CompareTabSizer = wx.BoxSizer(wx.HORIZONTAL)

        self.graphPanel = wx.ScrolledWindow(self.CompareTab, wx.ID_ANY, style=wx.BORDER_RAISED | wx.TAB_TRAVERSAL)
        self.graphPanel.SetScrollRate(10, 10)
        CompareTabSizer.Add(self.graphPanel, 1, 0, 0)

        self.Data1 = wx.Panel(self.dataNB, wx.ID_ANY, style=wx.BORDER_RAISED | wx.TAB_TRAVERSAL)
        self.Data1.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.dataNB.AddPage(self.Data1, _("Data 1"))

        data1Grid = wx.BoxSizer(wx.HORIZONTAL)

        self.list_data_1 = wx.ListCtrl(self.Data1, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.list_data_1.AppendColumn(_("A"), format=wx.LIST_FORMAT_LEFT, width=-1)
        self.list_data_1.AppendColumn(_("B"), format=wx.LIST_FORMAT_LEFT, width=-1)
        self.list_data_1.AppendColumn(_("C"), format=wx.LIST_FORMAT_LEFT, width=-1)
        data1Grid.Add(self.list_data_1, 1, wx.ALL | wx.EXPAND, 0)

        self.Data2 = wx.ScrolledWindow(self.dataNB, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.Data2.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.Data2.SetScrollRate(10, 10)
        self.dataNB.AddPage(self.Data2, _("Data 2"))

        data2Grid = wx.BoxSizer(wx.HORIZONTAL)

        self.list_data_2 = wx.ListCtrl(self.Data2, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.list_data_2.AppendColumn(_("A"), format=wx.LIST_FORMAT_LEFT, width=-1)
        self.list_data_2.AppendColumn(_("B"), format=wx.LIST_FORMAT_LEFT, width=-1)
        self.list_data_2.AppendColumn(_("C"), format=wx.LIST_FORMAT_LEFT, width=-1)
        data2Grid.Add(self.list_data_2, 1, wx.ALL | wx.EXPAND, 0)

        bottomSizer = wx.BoxSizer(wx.HORIZONTAL)
        frameSizer.Add(bottomSizer, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 2)

        self.configPanel = wx.Panel(self, wx.ID_ANY)
        self.configPanel.SetMinSize((-1, 200))
        bottomSizer.Add(self.configPanel, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 2)

        configSizer = wx.StaticBoxSizer(wx.StaticBox(self.configPanel, wx.ID_ANY, _("Config")), wx.VERTICAL)

        self.ConfigBtn = wx.Button(self.configPanel, wx.ID_ANY, _("Config"))
        configSizer.Add(self.ConfigBtn, 0, wx.ALL, 2)

        self.ClearBtn = wx.Button(self.configPanel, wx.ID_ANY, _("Clear"))
        configSizer.Add(self.ClearBtn, 0, wx.ALL, 2)

        self.StartBtn = wx.ToggleButton(self.configPanel, wx.ID_ANY, _("Start / Stop"))
        configSizer.Add(self.StartBtn, 0, wx.ALL, 2)

        self.statusPanel = wx.Panel(self, wx.ID_ANY)
        bottomSizer.Add(self.statusPanel, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 2)

        statusSizer = wx.StaticBoxSizer(wx.StaticBox(self.statusPanel, wx.ID_ANY, _("Status")), wx.HORIZONTAL)

        self.text_ctrl_1 = wx.TextCtrl(self.statusPanel, wx.ID_ANY, "")
        statusSizer.Add(self.text_ctrl_1, 2, wx.ALL | wx.EXPAND, 2)

        self.statusPanel.SetSizer(statusSizer)

        self.configPanel.SetSizer(configSizer)

        self.Data2.SetSizer(data2Grid)

        self.Data1.SetSizer(data1Grid)

        self.CompareTab.SetSizer(CompareTabSizer)

        self.dataPanel.SetSizer(dataPanelSizer)

        self.controlPanel.SetSizer(controlSizer)

        self.SetSizer(frameSizer)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.LoadData1BtnHandler, self.LoadData1)
        self.Bind(wx.EVT_BUTTON, self.LoadData2BtnHandler, self.LoadData2)
        self.Bind(wx.EVT_BUTTON, self.AnalyzeData1BtnHandler, self.AnalyzeData1)
        self.Bind(wx.EVT_BUTTON, self.AnalyzeData2BtnHandler, self.AnalyzeData2)
        self.Bind(wx.EVT_BUTTON, self.CompareBtnHandler, self.CompareData)
        self.Bind(wx.EVT_TEXT_ENTER, self.InterfaceTextCtrlHandler, self.interface_text_ctrl)
        self.Bind(wx.EVT_TEXT_ENTER, self.TimeoutTextCtrlHandler, self.timeout_text_ctrl)
        self.Bind(wx.EVT_TEXT_ENTER, self.FilterTextCtrlHandler, self.filter_text_ctrl)
        self.Bind(wx.EVT_BUTTON, self.SniffDataFileBtnHandler, self.SniffDataFile)
        self.Bind(wx.EVT_BUTTON, self.SniffDataLiveBtnHandler, self.SniffDataLive)
        self.Bind(wx.EVT_TEXT_ENTER, self.InterfaceNiosCpuHandler, self.interface_nios_cpu)
        self.Bind(wx.EVT_TEXT_ENTER, self.InterfaceNiosMemoryReadHandler, self.interface_nios_memory_read)
        self.Bind(wx.EVT_BUTTON, self.ReadNiosMemoryBtnHandler, self.ReadNiosMemory)
        self.Bind(wx.EVT_TEXT_ENTER, self.InterfaceNiosMemoryWriteHandler, self.interface_nios_memory_write)
        self.Bind(wx.EVT_BUTTON, self.WriteNiosMemoryBtnHandler, self.WriteNiosMemory)
        self.Bind(wx.EVT_NAVIGATION_KEY, self.graphTabSelect)
        self.Bind(wx.EVT_NAVIGATION_KEY, self.graphPanelSelect)
        self.Bind(wx.EVT_NAVIGATION_KEY, self.data1TabSelect)
        self.Bind(wx.EVT_NAVIGATION_KEY, self.data2TabSelect)
        # end wxGlade

    def CloseHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'CloseHandler' not implemented!")
        event.Skip()

    def AboutHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'AboutHandler' not implemented!")
        event.Skip()

    def LoadData1BtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'LoadData1BtnHandler' not implemented!")
        event.Skip()

    def LoadData2BtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'LoadData2BtnHandler' not implemented!")
        event.Skip()

    def AnalyzeData1BtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'AnalyzeData1BtnHandler' not implemented!")
        event.Skip()

    def AnalyzeData2BtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'AnalyzeData2BtnHandler' not implemented!")
        event.Skip()

    def CompareBtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'CompareBtnHandler' not implemented!")
        event.Skip()

    def InterfaceTextCtrlHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'InterfaceTextCtrlHandler' not implemented!")
        event.Skip()

    def TimeoutTextCtrlHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'TimeoutTextCtrlHandler' not implemented!")
        event.Skip()

    def FilterTextCtrlHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'FilterTextCtrlHandler' not implemented!")
        event.Skip()

    def SniffDataFileBtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'SniffDataFileBtnHandler' not implemented!")
        event.Skip()

    def SniffDataLiveBtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'SniffDataLiveBtnHandler' not implemented!")
        event.Skip()

    def InterfaceNiosCpuHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'InterfaceNiosCpuHandler' not implemented!")
        event.Skip()

    def InterfaceNiosMemoryReadHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'InterfaceNiosMemoryReadHandler' not implemented!")
        event.Skip()

    def ReadNiosMemoryBtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'ReadNiosMemoryBtnHandler' not implemented!")
        event.Skip()

    def InterfaceNiosMemoryWriteHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'InterfaceNiosMemoryWriteHandler' not implemented!")
        event.Skip()

    def WriteNiosMemoryBtnHandler(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'WriteNiosMemoryBtnHandler' not implemented!")
        event.Skip()

    def graphTabSelect(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'graphTabSelect' not implemented!")
        event.Skip()

    def graphPanelSelect(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'graphPanelSelect' not implemented!")
        event.Skip()

    def data1TabSelect(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'data1TabSelect' not implemented!")
        event.Skip()

    def data2TabSelect(self, event):  # wxGlade: DataAnalysisLabFrame.<event_handler>
        print("Event handler 'data2TabSelect' not implemented!")
        event.Skip()

# end of class DataAnalysisLabFrame

class DataAnalysisLabApp(wx.App):
    def OnInit(self):
        self.mainFrame = DataAnalysisLabFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.mainFrame)
        self.mainFrame.Show()
        return True

# end of class DataAnalysisLabApp

if __name__ == "__main__":
    gettext.install("DataAnalysisLab") # replace with the appropriate catalog name

    DataAnalysisLab = DataAnalysisLabApp(0)
    DataAnalysisLab.MainLoop()
